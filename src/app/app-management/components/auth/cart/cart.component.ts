import { Component, OnInit } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { AuthService } from './../../../service/auth.service';
import { MessageService } from 'primeng/api';
import { storageKey } from 'src/app/app-constant';
interface CartItem {
  id: number;
  name: string;
  quantity: number;
  price: number;
  foodId: string;
  totalPrice: number;
}

@Component({
  selector: 'app-cart',
  templateUrl: './cart.component.html',
  styleUrls: ['./cart.component.scss'],
  providers: [MessageService]
})
export class CartComponent {
  header: any;
  cartItems: CartItem[] = [];
  cartId: any;
  totalAmount: number = 0;

  constructor(private http: HttpClient, private authService: AuthService, private messageService: MessageService) { }

  ngOnInit() {
    this.header = new HttpHeaders().set(
      storageKey.AUTHORIZATION,
      this.authService.getToken()
    );
    this.loadCart();

  }

  // L·∫•y gi·ªè h√†ng t·ª´ API
  loadCart() {
    // console.log("From cart " + this.authService.getCartid());
    // console.log(this.header);
    this.cartId = this.authService.getCartid(); // L·∫•y ID t√†i kho·∫£n khi ƒëƒÉng nh·∫≠p
    // if (!accountId) {
    //   this.messageService.add({ severity: 'error', summary: 'L·ªói', detail: 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem gi·ªè h√†ng' });
    //   return;
    // }

    this.http.get<any>('http://13.239.169.8:8080/api/v1/project/cartItem/info?cartId=' + this.cartId, {
      headers: this.header
    })
      .subscribe(
        (response) => {
          if (response.resultCode === 0) {
            if (response.data && response.data.length > 0) {
              // N·∫øu c√≥ s·∫£n ph·∫©m trong gi·ªè h√†ng, hi·ªÉn th·ªã danh s√°ch
              this.cartItems = response.data.map((item: any) => ({
                id: item.id,
                name: item.foodName,
                quantity: item.quantity,
                price: item.foodPrice,
                foodId: item.foodId
              }));
              // console.log(this.cartItems);
            } else {
              // N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m, hi·ªÉn th·ªã th√¥ng b√°o "Gi·ªè h√†ng tr·ªëng"
              this.cartItems = [];
              this.messageService.add({ severity: 'info', summary: 'Th√¥ng b√°o', detail: 'Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng' });
            }
          } else {
            this.messageService.add({ severity: 'error', summary: 'L·ªói', detail: response.message });
          }
        },
        (error) => {
          console.error('L·ªói khi t·∫£i gi·ªè h√†ng:', error);
          this.messageService.add({ severity: 'error', summary: 'L·ªói', detail: 'Kh√¥ng th·ªÉ t·∫£i gi·ªè h√†ng' });
        }
      );
  }

  // TƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
increaseQuantity(cartItemId: number) {
  console.log(cartItemId);
  this.updateQuantity(cartItemId, 1); // TƒÉng s·ªë l∆∞·ª£ng l√™n 1
}

// Gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m (kh√¥ng gi·∫£m d∆∞·ªõi 1)
decreaseQuantity(cartItemId: number) {
  const item = this.cartItems.find(cartItem => cartItem.id === cartItemId);
  if (item && item.quantity > 1) {
      this.updateQuantity(cartItemId, -1); // Gi·∫£m s·ªë l∆∞·ª£ng ƒëi 1
  }
}

// C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
updateQuantity(cartItemId: number, change: number) {
  const item = this.cartItems.find(cartItem => cartItem.id === cartItemId);
  if (!item) return;

  const newQuantity = item.quantity + change;
  if (newQuantity < 1) return; // Kh√¥ng gi·∫£m d∆∞·ªõi 1

  const payload = {
      cartItemId: cartItemId,
      quantity: newQuantity
  };

  this.http.put('http://13.239.169.8:8080/api/v1/project/cartItem/update', payload, { headers: this.header })
      .subscribe(
          (response: any) => {
              if (response.resultCode === 0) {
                  item.quantity = newQuantity;
                  item.totalPrice = item.quantity * item.price; // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn c·ªßa s·∫£n ph·∫©m

                  // üöÄ Quan tr·ªçng: T·∫°o b·∫£n sao m·ªõi ƒë·ªÉ Angular c·∫≠p nh·∫≠t giao di·ªán
                  this.cartItems = [...this.cartItems];

                  // C·∫≠p nh·∫≠t t·ªïng h√≥a ƒë∆°n
                  // this.updateTotalAmount();
                  this.loadCart();
                  console.log(this.cartItems);
              } else {
                  this.messageService.add({ severity: 'error', summary: 'L·ªói', detail: response.message });
              }
          },
          (error) => {
              console.error('L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:', error);
              this.messageService.add({ severity: 'error', summary: 'L·ªói', detail: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng' });
          }
      );
}


// T√≠nh t·ªïng h√≥a ƒë∆°n
updateTotalAmount() {
  this.totalAmount = this.cartItems.reduce((sum, item) => sum + (item.quantity * item.price), 0);
}


  // X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
  removeItem(index: number) {
    const item = this.cartItems[index];

    this.http.post('http://13.239.169.8:8080/api/v1/project/cartItem/delete', { cartItemId: item.id })
      .subscribe(
        (response: any) => {
          if (response.resultCode === 0) {
            this.cartItems.splice(index, 1);
          } else {
            this.messageService.add({ severity: 'error', summary: 'L·ªói', detail: response.message });
          }
        },
        (error) => {
          console.error('L·ªói khi x√≥a s·∫£n ph·∫©m:', error);
          this.messageService.add({ severity: 'error', summary: 'L·ªói', detail: 'Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m' });
        }
      );
  }

  // T√≠nh t·ªïng gi√° tr·ªã gi·ªè h√†ng
  getTotal(): number {
    return this.cartItems.reduce((sum, item) => sum + item.quantity * item.price, 0);
  }

  // ƒê·∫∑t h√†ng
  placeOrder() {
    const payload = {
      accountId: this.authService.getCartid(),
      cartId: this.cartId
    };

    this.http.post('http://13.239.169.8:8080/api/v1/project/cartItem/placeOrder', payload)
      .subscribe(
        (response: any) => {
          if (response.resultCode === 0) {
            this.messageService.add({ severity: 'success', summary: 'Th√†nh c√¥ng', detail: 'ƒê·∫∑t h√†ng th√†nh c√¥ng!' });
            this.cartItems = [];
          } else {
            this.messageService.add({ severity: 'error', summary: 'L·ªói', detail: response.message });
          }
        },
        (error) => {
          console.error('L·ªói khi ƒë·∫∑t h√†ng:', error);
          this.messageService.add({ severity: 'error', summary: 'L·ªói', detail: 'Kh√¥ng th·ªÉ ƒë·∫∑t h√†ng' });
        }
      );
  }
}
