import { Injectable } from '@angular/core';
import { Client } from '@stomp/stompjs';
import * as SockJS from 'sockjs-client';
import { AuthService } from './auth.service';
import { environment } from 'src/environments/environment';

@Injectable({
  providedIn: 'root'
})
export class WebSocketService {
  private stompClient: Client;

  constructor(private authService:AuthService) {
    this.stompClient = new Client({
      brokerURL:environment.backendApiUrl+ '/ws?token='+this.authService.getToken(), 
    //   connectHeaders: {
    //     Authorization: `${this.authService.getToken()}` // G·ª≠i JWT trong header (d·ª± ph√≤ng)
    // },
      debug: (msg: string) => console.log(msg), // Debug log
      reconnectDelay: 5000, // T·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i sau 5s n·∫øu m·∫•t k·∫øt n·ªëi
      heartbeatIncoming: 4000,
      heartbeatOutgoing: 4000
    });

    this.stompClient.onConnect = (frame) => {
      console.log('Connected: ' + frame);
      this.stompClient.subscribe('/user/queue/notifications', message => {
        console.log('üì© Th√¥ng b√°o c√° nh√¢n:', message.body);
      });
      this.stompClient.subscribe('/topic/public', message => {
        console.log('üì© Th√¥ng b√°o chung:', message.body);
      });
    };

    this.stompClient.onDisconnect = () => {
      console.log('Disconnected!');
    };
  }

  // K·∫øt n·ªëi WebSocket
  connect() {
    this.stompClient.activate(); // Thay v√¨ connect()
  }

  // Ng·∫Øt k·∫øt n·ªëi
  disconnect() {
    this.stompClient.deactivate();
  }

  // G·ª≠i tin nh·∫Øn qua WebSocket
  sendMessage(destination: string, body: any) {
    if (this.stompClient.connected) {
      this.stompClient.publish({ destination, body: JSON.stringify(body) });
    }
  }
}
